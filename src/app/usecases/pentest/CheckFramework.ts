import { Package } from "@entities/Package";
import { ADBRepository } from "@repositories/ADBRepository";
import { ITerm } from "@repositories/ITerm";

export class Framework {
  adbRepo: ADBRepository;
  terminalRepo: ITerm;

  constructor(adbRepo: ADBRepository, terminalRepo: ITerm) {
    this.adbRepo = adbRepo;
    this.terminalRepo = terminalRepo;
  }

  async check(packageId: string): Promise<Package> {
    const apk = await this.adbRepo.getPackage(packageId);
    for (let i in apk.name) {
      let isUnzip = await this.terminalRepo.unzipFile(
        `${apk.id}/${apk.name[i]}/${apk.name[i]}.apk`,
        `${apk.id}/${apk.name[i]}/${apk.name[i]}`
      );
      if (isUnzip) {
        console.log(
          `Unzip ${apk.id}/${apk.name[i]}/${apk.name[i]}.apk to directory ${apk.id}/${apk.name[i]}/${apk.name[i]}`
        );
        const list = await this.terminalRepo.listFile(
          `${apk.id}/${apk.name[i]}/${apk.name[i]}`
        );
        const formartList = list.split("\n").filter((str) => str != "");
        const files = formartList.map((file) => file.split("/").pop());
        if (files.includes("index.android.bundle")) {
          apk["framework"] = "react-native";
        } else if (files.includes("libil2cpp.so")) {
          apk["engine"] = "unity";
        } else if (files.includes("libfmod.so")) {
          apk["engine"] = "Cocos2D";
        } else {
          apk["framework"] = "native";
        }
      }
    }
    return apk;
  }
}

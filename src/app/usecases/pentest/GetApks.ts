import { TermRepositoryImpl } from "@impl/TermRepositoryImpl";
import { APKID } from "@repositories/APKID";
import { IAPKTools } from "@repositories/IAPKTools";
import { AppInfo } from "@entities/AppInfo";
import { PlayStoreRepository } from "@repositories/PlayStoreRepository";
import { Raccoon } from "@repositories/RaccoonRepository";
import { CONFIG } from "config/config";
export class GetAPK {
  playStoreRepo: PlayStoreRepository;
  raccoonRepo: Raccoon;
  terminalRepo: TermRepositoryImpl;
  apktoolRepo: IAPKTools;
  apkidRepo: APKID;

  constructor(
    playStore: PlayStoreRepository,
    raccoonRepo: Raccoon,
    terminalRepo: TermRepositoryImpl,
    apktoolRepo: IAPKTools,
    apkidRepo: APKID
  ) {
    this.playStoreRepo = playStore;
    this.raccoonRepo = raccoonRepo;
    this.terminalRepo = terminalRepo;
    this.apktoolRepo = apktoolRepo;
    this.apkidRepo = apkidRepo;
  }

  async downloadAPK(packageID: string): Promise<AppInfo> {
    const appItem = await this.playStoreRepo.searchPackageInfo(packageID);
    const path = await this.raccoonRepo.execute(appItem.appId);
    const appInfo: AppInfo = {
      title: appItem.title,
      appId: appItem.appId,
      framework: "Native",
      gameEngine: undefined,
      shield: undefined,
      recentChanges: appItem.recentChanges,
      version: appItem.version,
      androidVersion: appItem.androidVersion,
      developer: appItem.developer,
    };
    if (path != undefined) {
      const file = await this.terminalRepo.listAPK(path);
      const fileFormats = file.split("\n").filter((apk) => apk !== "");
      let targetDir = CONFIG.dir + `${appItem.appId}/`;
      let sourceDir = CONFIG.dir + `${appItem.appId}/source`;
      let bundleDir = CONFIG.dir + `${appItem.appId}/source/assets`;
      let armDir = CONFIG.dir + `${appItem.appId}/config_arm`;

      for (const file of fileFormats) {
        //Check app framework
        if (file.includes(appItem.appId)) {
          await this.apktoolRepo.decompileNoRes(targetDir + file, sourceDir);
          let rn = await this.terminalRepo.search("bundle", bundleDir);
          if (rn != undefined) {
            appInfo.framework = "React Native";
            // const bundlePath = await this.terminalRepo.checkVersionRN(rn);
            // const bundleVersion = bundlePath?.slice(
            //   bundlePath.indexOf(":") + 1
            // );
            // appInfo.framework.version = bundleVersion;
          }
        } else if (file.includes("config.arm64_v8a")) {
          let flutter = await this.terminalRepo.search("fullter", armDir);
          if (flutter != undefined) {
            appInfo.framework = "Flutter";
          }

          // Check app shield
          const apkIdResult = await this.apkidRepo.scanDepthFive(
            targetDir + file
          );
          const formatApkIdResult = apkIdResult.split("\n");
          const removeApkIdTitle = formatApkIdResult.filter(
            (item) => item !== "[+] APKiD 2.1.3 :: from RedNaga :: rednaga.io"
          );
          const shield = removeApkIdTitle.join("\n");
          if (shield != undefined) {
            appInfo.shield = shield;
          }
          const google = await this.terminalRepo.search(
            "libpairipcore.so",
            armDir
          );
          console.log(shield);
          if (google != undefined) {
            appInfo.shield = "Google Shield";
          }

          // Check app game engine
          await this.terminalRepo.unzipFile(targetDir + file, armDir);
          const unitiy = await this.terminalRepo.search("libil2cpp", armDir);
          if (unitiy != undefined) {
            appInfo.gameEngine = "Unity";
          }
          const cocos = await this.terminalRepo.search("cocos", armDir);
          if (cocos != undefined) {
            appInfo.gameEngine = "Cocos";
          }

          let unrealEngine = await this.terminalRepo.search(
            "libUE4.so",
            armDir
          );
          if (unrealEngine != undefined) {
            appInfo.gameEngine = "Unreal Engine";
          }
        }
      }
    }
    return appInfo;
  }
}

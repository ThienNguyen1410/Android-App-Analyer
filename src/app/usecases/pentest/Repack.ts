import { ADBRepository } from "@repositories/ADBRepository";
import { IAPKTools } from "@repositories/IAPKTools";
import { ISigner } from "@repositories/ISigner";
import { createDir } from "@utils/CreateDir";

export class Repack {
  adbRepo: ADBRepository;
  apktoolRepo: IAPKTools;
  signerRepo: ISigner;
  constructor(
    adbRepo: ADBRepository,
    apktoolRepo: IAPKTools,
    signerRepo: ISigner
  ) {
    this.adbRepo = adbRepo;
    this.apktoolRepo = apktoolRepo;
    this.signerRepo = signerRepo;
  }

  async performRepack(packageId: string) {
    const apk = await this.adbRepo.getPackage(packageId);
    const destinations: string[] = [];
    apk.name.forEach((name) => {
      if (name != undefined) {
        createDir(`${packageId}/${name}`);
        destinations.push(`${packageId}/${name}`);
      }
    });
    for (let i = 0; i < apk.path.length; i++) {
      await this.adbRepo.pullApk(apk.path[i], destinations[i]);
      console.log(`Pulled ${apk.path[i]} to folder ${destinations[i]}`);
    }
    apk.name.forEach((name) => {
      if (name != undefined && name === "base") {
        this.apktoolRepo
          .decompileNoRes(
            `${packageId}/${name}/${name}.apk`,
            `${packageId}/${name}/source`
          )
          .then(() => {
            console.log(
              `Decompiled ${name}.apk complete at folder ${packageId}/${name}/source`
            );
            this.apktoolRepo
              .buildApp(`${packageId}/${name}/source`)
              .then(() => {
                console.log(`Repack ${packageId}/${name}/source success!`);
                this.signerRepo
                  .signApk(`${packageId}/${name}/source/dist/base.apk`)
                  .then(() => {
                    console.log(
                      `Signned ${packageId}/${name}/source/dist/base.apk`
                    );
                  });
              });
          })
          .catch((error) => console.log(error));
      }
    });
  }
}
